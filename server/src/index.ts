import "reflect-metadata"

import { ApolloServer } from 'apollo-server-express';
import { express as voyagerMiddleware } from 'graphql-voyager/middleware';
import express from 'express';
import Mongoose from 'mongoose';
import { GET_SCHEMA } from './api/Root';
import sqlite from 'sqlite';
import cors from 'cors';
import bodyParser from 'body-parser';

async function bootstrap() {
    console.log(`\nexploit.me\n`);
    console.log(`Developed by Alexandre Lavoie\n`);

    const app = express();

    app.use(cors());

    app.use(bodyParser.json());

    app.use(bodyParser.urlencoded({ extended: true }));

    if(process.env.NODE_ENV !== 'production'){
        app.use('/voyager', voyagerMiddleware({ endpointUrl: '/graphql' }));

        console.log(`Voyager: http://localhost:4000/voyager`);
    }
    
    const db = await sqlite.open('./exploit.db');

    app.post('/sql-injection', async function (req, res) {
        try {
            const data = await db.all(`SELECT ID FROM Users WHERE Username = '${req.body.username}' AND Password = '${req.body.password}'`);

            res.send(data);
        } catch(e) {
            res.send(e);
        }
    });

    const server = new ApolloServer({
        schema: await GET_SCHEMA(),
        playground: process.env.NODE_ENV !== 'production'
    });

    server.applyMiddleware({ app });

    Mongoose.connect('mongodb://localhost:27017/exploitme', { useNewUrlParser: true, useUnifiedTopology: true, useFindAndModify: false });

    Mongoose.connection.once('open', () => {
        console.log(`MongoDB: mongodb://localhost:27017/exploitme`);
    });

    app.listen({ port: 4000 }, () =>
        console.log(`GraphQL: http://localhost:4000${server.graphqlPath}`)
    );
}

bootstrap();