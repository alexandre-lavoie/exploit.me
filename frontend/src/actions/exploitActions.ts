import { useState, useEffect } from "react";
import firebase from "../firebase";
import { IExploit } from "../types/exploit";

export function useFetchExploits(): [IExploit[] | undefined, boolean, boolean] {
  const [exploits, setExploits] = useState<IExploit[]>();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(false);

  useEffect(() => {
    setLoading(true);

    firebase
      .firestore()
      .collection("exploits")
      .onSnapshot(collection => {
        if(collection.size === 0) {
          setError(true);
        }

        setExploits(
          collection.docs.map(doc => ({
            id: doc.id,
            ...doc.data()
          }) as IExploit)
        );

        setLoading(false);
      });
  }, []);

  return [exploits, loading, error];
}

export function useFetchExploit(
  id: string | undefined,
): [IExploit | undefined, boolean, boolean] {
  const [exploit, setExploit] = useState<IExploit>();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(false);

  useEffect(() => {
    if (!loading && id && (!exploit || exploit.id !== id)) {
      setLoading(true);

      firebase
        .firestore()
        .collection("exploits")
        .doc(id)
        .onSnapshot((doc) => {
          setLoading(false);

          if (doc.exists) {
            setExploit({
              id: doc.id,
              ...doc.data(),
            } as IExploit);
          } else {
            setError(true);
          }
        });
    }
  }, [exploit, loading, id]);

  return [exploit, loading, error];
}

export function useDeleteExploit(): [boolean, boolean, (id: string) => void] {
  const [exploitDeleted, setExploitDelete] = useState(false);
  const [error, setError] = useState(false);

  function deleteExploit(id: string) {
    firebase.firestore().collection("exploits").doc(id).delete().then(() => {
      setExploitDelete(true);
    }).catch(() => setError(true));
  }

  return [exploitDeleted, error, deleteExploit];
}

export function useCreateExploit(): [
  IExploit | undefined,
  boolean,
  boolean,
  (exploit: IExploit) => void,
] {
  const [exploit, setExploit] = useState<IExploit>();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(false);

  function createExploit(exploit: IExploit) {
    setLoading(true);

    firebase.firestore().collection("exploits").add(exploit).then((doc) => {
      doc.onSnapshot((doc) => {
        setExploit({
          id: doc.id,
          ...doc.data(),
        } as IExploit);
        setLoading(false);
      });
    }).catch(() => {
      setLoading(false);
      setError(true);
    });
  }

  return [exploit, loading, error, createExploit];
}

export function useUpdateExploit(): [
  boolean,
  boolean,
  boolean,
  (id: string, exploit: IExploit) => void,
] {
  const [exploit, setExploit] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(false);

  function updateExploit(id: string, exploit: IExploit) {
    setLoading(true);

    firebase.firestore().collection("exploits").doc(id).set(exploit).then(
      () => {
        setExploit(true);
        setLoading(false);
      },
    ).catch(() => {
      setError(true);
      setLoading(false);
    });
  }

  return [exploit, loading, error, updateExploit];
}
