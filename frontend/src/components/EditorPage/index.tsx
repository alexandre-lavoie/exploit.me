import React, { useState, useEffect } from 'react';
import { Grid, Button, TextField, Typography } from '@material-ui/core';
import Markdown from 'react-markdown';
import { CREATE_EXPOIT, FETCH_EXPLOIT, UPDATE_EXPLOIT } from '../../actions/exploitActions';
import { useMutation, useQuery } from '@apollo/react-hooks';
import { useHistory, useParams } from 'react-router-dom';
import LoadingPage from '../LoadingPage';
import ErrorPage from '../ErrorPage';
import { motion } from 'framer-motion';

let isUpdate = false;

const EditorPage: React.FC = () => {
    const { id } = useParams();
    const history = useHistory();
    const [description, setDescription] = useState('');
    const [name, setName] = useState('');
    const [video, setVideo] = useState('');
    const [categories, setCategories] = useState('');
    const [sandbox, setSandbox] = useState('');

    const fetchExploit = useQuery(FETCH_EXPLOIT, {variables: {
        id
    }});

    useEffect(() => {
        isUpdate = false;

        return () => {
            isUpdate = false;
        }
    }, [])

    if(!isUpdate && fetchExploit.data && fetchExploit.data.exploit){
        isUpdate = true;

        setName(fetchExploit.data.exploit.name);
        setVideo(fetchExploit.data.exploit.video);
        setDescription(fetchExploit.data.exploit.description);
        setCategories(fetchExploit.data.exploit.categories.join(', '));
        setSandbox(fetchExploit.data.exploit.sandbox);
    }

    const [createExploit, createFetch] = useMutation(CREATE_EXPOIT);
    const [updateExploit, updateFetch] = useMutation(UPDATE_EXPLOIT);
    
    if (createFetch.data && createFetch.data.createExploit) {
        history.push(`/exploit/${createFetch.data.createExploit.id}`);
    } else if (updateFetch.data && updateFetch.data.updateExploit){
        history.push(`/exploit/${updateFetch.data.updateExploit.id}`);
    }

    if (createFetch.loading || fetchExploit.loading || updateFetch.loading) return <LoadingPage />;

    if (createFetch.error || (id != null && fetchExploit.error) || updateFetch.error) return <ErrorPage />;

    return (
        <motion.div
            initial={{
                opacity: 0,
                y: 100
            }}
            animate = {{
                opacity: 1,
                y: 0
            }}
            transition={{
                delay: 0.25,
                duration: 0.5
            }}
            style={{ width: '100%', height: '100vh' }}
        >
            <Grid container justify='center' alignItems='center' spacing={3} style={{ width: '100%', height:'100%' }}>
                <Grid item container justify='center' xs={12}>
                    <h1>Exploit Editor</h1>
                </Grid>
                <Grid item container direction='column' spacing={2} xs={4}>
                    <Grid item container justify='center' direction='column'>
                        <TextField label='Name' color='secondary' variant="outlined" value={name} onChange={(e) => setName(e.target.value)} style={{width: '100%'}} />
                    </Grid>
                    <Grid item container justify='center' direction='column'>
                        <TextField label='Categories' color='secondary' variant="outlined" value={categories} onChange={(e) => setCategories(e.target.value)} style={{width: '100%'}} />
                    </Grid>
                    <Grid item container justify='center' direction='column'>
                        <TextField label='Video URL' color='secondary' variant="outlined" value={video} onChange={(e) => setVideo(e.target.value)} style={{width: '100%'}} />
                    </Grid>
                    <Grid item container justify='center' direction='column'>
                        <TextField label='Sandbox URL' color='secondary' variant="outlined" value={sandbox} onChange={(e) => setSandbox(e.target.value)} style={{width: '100%'}} />
                    </Grid>
                    <Grid item container justify='center' direction='column'>
                        <TextField multiline label='Description' color='secondary' variant="outlined" value={description} onChange={(e)=> setDescription(e.target.value)} style={{width: '100%'}} />
                    </Grid>
                </Grid>
                <Grid item container alignItems='center' xs={4}>
                    <Grid item xs={12}>
                        <div style={{ borderRadius: '5px', padding: '5px 10px', border: '1px solid', borderColor: '#999999', minHeight: '300px'}}>
                            <Typography variant='h5'>{name}</Typography>
                            <Markdown source={description}/>
                        </div>
                    </Grid>
                </Grid>
                <Grid item container justify='center' xs={12}>
                    <Button variant='outlined' onClick={
                        () => {
                            let c = categories.replace(' ', '').split(',');

                            if(isUpdate){
                                updateExploit({variables: {
                                    id,
                                    input: {
                                        name, 
                                        description,
                                        video,
                                        categories: c,
                                        sandbox
                                    }
                                }})
                            } else {
                                createExploit({variables: {
                                    input: {
                                        name, 
                                        description,
                                        video,
                                        categories: c,
                                        sandbox
                                    }
                                }})
                            }
                        }
                    }>{(isUpdate) ? 'Update': 'Create'}</Button>
                </Grid>
            </Grid>
        </motion.div>
    )

}

export default EditorPage;