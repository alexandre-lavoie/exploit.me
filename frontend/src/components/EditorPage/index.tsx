import React, { useState, useEffect } from 'react';
import { Grid, Button, TextField, Typography } from '@material-ui/core';
import Markdown from 'react-markdown';
import { useFetchExploit, useCreateExploit, useUpdateExploit } from '../../actions/exploitActions';
import { isLoggedIn } from '../../actions/authActions';
import { IExploit } from '../../types/exploit';
import { useHistory, useParams } from 'react-router-dom';
import LoadingPage from '../LoadingPage';
import ErrorPage from '../ErrorPage';
import { motion } from 'framer-motion';

const EditorPage: React.FC = () => {
    const { id } = useParams();
    const history = useHistory();
    const [description, setDescription] = useState('');
    const [name, setName] = useState('');
    const [video, setVideo] = useState('');
    const [sandbox, setSandbox] = useState('');
    const [exploit, fetchLoading, fetchError] = useFetchExploit(id);
    const [didUpdate, updateLoading, updateError, updateExploit] = useUpdateExploit();
    const [exploitCreate, createLoading, createError, createExploit] = useCreateExploit();

    useEffect(() => {
        if(name === '' && exploit) {
            setName(exploit.name);
            setVideo(exploit.video);
            setDescription(exploit.description);
            setSandbox(exploit.sandbox ? exploit.sandbox : '');
        }
    }, [name, exploit]);

    if (!isLoggedIn()) {
        history.push('/');

        return <LoadingPage />;
    }
    
    if (fetchLoading || updateLoading || createLoading) return <LoadingPage />;

    if (fetchError || updateError || createError) return <ErrorPage />;

    if (exploitCreate) {
        history.push(`/exploit/${exploitCreate.id}`);
    } else if (didUpdate){
        history.push(`/exploit/${id}`);
    }

    return (
        <motion.div
            initial={{
                opacity: 0,
                y: 100
            }}
            animate = {{
                opacity: 1,
                y: 0
            }}
            transition={{
                delay: 0.25,
                duration: 0.5
            }}
            style={{ width: '100%', height: '100vh' }}
        >
            <Grid container justify='center' alignItems='center' spacing={3} style={{ width: '100%', height:'100%' }}>
                <Grid item container justify='center' xs={12}>
                    <h1>Exploit Editor</h1>
                </Grid>
                <Grid item container direction='column' spacing={2} xs={4}>
                    {
                        [
                            {
                                label: 'Name',
                                value: name,
                                onChange: setName
                            },
                            {
                                label: 'Description',
                                multiline: true,
                                value: description,
                                onChange: setDescription
                            },
                            {
                                label: 'Video URL',
                                value: video,
                                onChange: setVideo
                            },
                            {
                                label: 'Sandbox URL',
                                value: sandbox,
                                onChange: setSandbox
                            }
                        ].map(field => (
                            <Grid item container justify='center' direction='column'>
                                <TextField 
                                    label={field.label} 
                                    multiline={field.multiline ? true : false} 
                                    color='secondary' 
                                    variant="outlined" 
                                    value={field.value} 
                                    onChange={(e) => field.onChange(e.target.value)} 
                                    style={{width: '100%'}} 
                                />
                            </Grid>
                        ))
                    }
                </Grid>
                <Grid item container alignItems='center' xs={4}>
                    <Grid item xs={12}>
                        <div style={{ borderRadius: '5px', padding: '5px 10px', border: '1px solid', borderColor: '#999999', minHeight: '300px'}}>
                            <Typography variant='h5'>{name}</Typography>
                            <Markdown source={description}/>
                        </div>
                    </Grid>
                </Grid>
                <Grid item container justify='center' xs={12}>
                    <Button variant='outlined' onClick={
                        () => {
                            let newExploit: IExploit = {
                                name,
                                description,
                                video,
                                sandbox
                            };

                            if(id){
                                updateExploit(id, newExploit);
                            } else {
                                createExploit(newExploit)
                            }
                        }
                    }>{(id) ? 'Update': 'Create'}</Button>
                </Grid>
            </Grid>
        </motion.div>
    )

}

export default EditorPage;